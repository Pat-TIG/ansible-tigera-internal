---
apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
bootstrapTokens:
- groups:
  - system:bootstrappers:kubeadm:default-node-token
  token: {{ join_token[:6] }}.{{ join_token[6:22] }}
  ttl: 24h0m0s
  usages:
  - signing
  - authentication
nodeRegistration:
  name: {{ ansible_fqdn }}
{% if cloud_provider is defined %}
  kubeletExtraArgs:
    cloud-provider: aws
{% endif %}
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: JoinConfiguration
nodeRegistration:
  name: {{ ansible_fqdn }}
  criSocket: /var/run/dockershim.sock
  taints: null
{% if cloud_provider is defined %}
  kubeletExtraArgs:
    cloud-provider: aws
{% endif %}
{% if controlPlane is defined %}
controlPlane:
  localAPIEndpoint:
    advertiseAddress: {{ ansible_default_ipv4.address }}
{% endif %}
discovery:
  bootstrapToken:
    token: {{ join_token[:6] }}.{{ join_token[6:22] }}
    apiServerEndpoint: {{ key_name }}.{{ dns_domain }}:6443
    unsafeSkipCAVerification: true
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
controlPlaneEndpoint: {{ key_name }}.{{ dns_domain }}:6443
apiServer:
  timeoutForControlPlane: 4m0s
  certSANs:
    - {{ key_name }}.{{ dns_domain }}
certificatesDir: /etc/kubernetes/pki
clusterName: kubernetes
{% if cloud_provider is defined %}
controllerManager:
  extraArgs:
    cloud-provider: {{ cloud_provider }}
    configure-cloud-routes: 'false'
{% else %}
controllerManager: {}
{% endif %}
dns:
  type: CoreDNS
etcd:
  local:
    dataDir: /var/lib/etcd
imageRepository: k8s.gcr.io
kubernetesVersion: {{ kubernetes_version }}
networking:
  dnsDomain: cluster.local
  serviceSubnet: {{ serviceSubnet }}
  podSubnet: {{ podSubnet }}
scheduler: {}
